{
	"name": "Demo Deltalake",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Spark1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e6fcac13-b9bc-4f47-af3e-dfa48d717c6d/resourceGroups/rgsynapseec44/providers/Microsoft.Synapse/workspaces/myec44synapse/bigDataPools/Spark1",
				"name": "Spark1",
				"type": "Spark",
				"endpoint": "https://myec44synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Spark1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"// Creation d'un dataframe df1 avec des donnees de vente\n",
					"case class Sale(item: String, customer: Int, quantity: Int, price: Double)\n",
					"val sale1 = new Sale(\"cheese\", 1, 1, 5.0)\n",
					"val sale2 = new Sale(\"bread\", 1, 1, 1.0)\n",
					"val df1 = Seq(sale1, sale2).toDF()"
				],
				"attachments": null,
				"execution_count": 103
			},
			{
				"cell_type": "code",
				"source": [
					"df1.write.format(\"delta\").save(\"abfss://demo@myec44datalake.dfs.core.windows.net/sales\")\n",
					"//spark.sql(\"CREATE TABLE sales USING DELTA LOCATION 'abfss://demo@myec44datalake.dfs.core.windows.net/sales'\")\n",
					""
				],
				"attachments": null,
				"execution_count": 104
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"item"
							],
							"values": [
								"customer"
							],
							"yLabel": "customer",
							"xLabel": "item",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"customer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"bread\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"cheese\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"wine\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\":1}}\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\"\\\"\"",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": true
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM sales\n",
					""
				],
				"attachments": null,
				"execution_count": 105
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"DESCRIBE DETAIL 'abfss://demo@myec44datalake.dfs.core.windows.net/sales'"
				],
				"attachments": null,
				"execution_count": 106
			},
			{
				"cell_type": "code",
				"source": [
					"val sale3 = new Sale(\"wine\", 1, 2, 10.0)\n",
					"val df2 = Seq(sale3).toDF()\n",
					"df2.write.format(\"delta\").mode(\"append\").save(\"abfss://demo@myec44datalake.dfs.core.windows.net/sales\")"
				],
				"attachments": null,
				"execution_count": 107
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"-- DESCRIBE HISTORY sales\n",
					"DESCRIBE HISTORY delta.`abfss://demo@myec44datalake.dfs.core.windows.net/sales`"
				],
				"attachments": null,
				"execution_count": 112
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.format(\"delta\").option(\"versionAsOf\", 1).load(\"abfss://demo@myec44datalake.dfs.core.windows.net/sales\")\r\n",
					"df.show()"
				],
				"attachments": null,
				"execution_count": 114
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"from delta.tables import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"sales = DeltaTable.forPath(spark, \"abfss://demo@myec44datalake.dfs.core.windows.net/sales\")\r\n",
					"sales.update(\r\n",
					"    condition= expr(\"item == 'cheese'\"),\r\n",
					"    set = { \"quantity\": expr(\"3\")}\r\n",
					")\r\n",
					"\r\n",
					"sales.toDF().show()"
				],
				"attachments": null,
				"execution_count": 111
			}
		]
	}
}